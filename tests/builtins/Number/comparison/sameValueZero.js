Test.expect(true, [1].includes(1));
Test.expect(false, [1].includes(2));
Test.expect(false, [2].includes(1));
Test.expect(false, [1].includes(Infinity));
Test.expect(false, [Infinity].includes(1));
Test.expect(false, [1].includes(-Infinity));
Test.expect(false, [-Infinity].includes(1));
Test.expect(false, [1].includes(NaN));
Test.expect(false, [NaN].includes(1));
Test.expect(false, [1].includes(0.01));
Test.expect(false, [0.01].includes(1));
Test.expect(false, [1].includes(0.0001));
Test.expect(false, [0.0001].includes(1));
Test.expect(false, [1].includes(Math.PI));
Test.expect(false, [Math.PI].includes(1));
Test.expect(false, [1].includes(0));
Test.expect(false, [0].includes(1));
Test.expect(false, [1].includes(-0));
Test.expect(false, [-0].includes(1));
Test.expect(true, [2].includes(2));
Test.expect(false, [2].includes(Infinity));
Test.expect(false, [Infinity].includes(2));
Test.expect(false, [2].includes(-Infinity));
Test.expect(false, [-Infinity].includes(2));
Test.expect(false, [2].includes(NaN));
Test.expect(false, [NaN].includes(2));
Test.expect(false, [2].includes(0.01));
Test.expect(false, [0.01].includes(2));
Test.expect(false, [2].includes(0.0001));
Test.expect(false, [0.0001].includes(2));
Test.expect(false, [2].includes(Math.PI));
Test.expect(false, [Math.PI].includes(2));
Test.expect(false, [2].includes(0));
Test.expect(false, [0].includes(2));
Test.expect(false, [2].includes(-0));
Test.expect(false, [-0].includes(2));
Test.expect(true, [Infinity].includes(Infinity));
Test.expect(false, [Infinity].includes(-Infinity));
Test.expect(false, [-Infinity].includes(Infinity));
Test.expect(false, [Infinity].includes(NaN));
Test.expect(false, [NaN].includes(Infinity));
Test.expect(false, [Infinity].includes(0.01));
Test.expect(false, [0.01].includes(Infinity));
Test.expect(false, [Infinity].includes(0.0001));
Test.expect(false, [0.0001].includes(Infinity));
Test.expect(false, [Infinity].includes(Math.PI));
Test.expect(false, [Math.PI].includes(Infinity));
Test.expect(false, [Infinity].includes(0));
Test.expect(false, [0].includes(Infinity));
Test.expect(false, [Infinity].includes(-0));
Test.expect(false, [-0].includes(Infinity));
Test.expect(true, [-Infinity].includes(-Infinity));
Test.expect(false, [-Infinity].includes(NaN));
Test.expect(false, [NaN].includes(-Infinity));
Test.expect(false, [-Infinity].includes(0.01));
Test.expect(false, [0.01].includes(-Infinity));
Test.expect(false, [-Infinity].includes(0.0001));
Test.expect(false, [0.0001].includes(-Infinity));
Test.expect(false, [-Infinity].includes(Math.PI));
Test.expect(false, [Math.PI].includes(-Infinity));
Test.expect(false, [-Infinity].includes(0));
Test.expect(false, [0].includes(-Infinity));
Test.expect(false, [-Infinity].includes(-0));
Test.expect(false, [-0].includes(-Infinity));
Test.expect(true, [NaN].includes(NaN));
Test.expect(false, [NaN].includes(0.01));
Test.expect(false, [0.01].includes(NaN));
Test.expect(false, [NaN].includes(0.0001));
Test.expect(false, [0.0001].includes(NaN));
Test.expect(false, [NaN].includes(Math.PI));
Test.expect(false, [Math.PI].includes(NaN));
Test.expect(false, [NaN].includes(0));
Test.expect(false, [0].includes(NaN));
Test.expect(false, [NaN].includes(-0));
Test.expect(false, [-0].includes(NaN));
Test.expect(true, [0.01].includes(0.01));
Test.expect(false, [0.01].includes(0.0001));
Test.expect(false, [0.0001].includes(0.01));
Test.expect(false, [0.01].includes(Math.PI));
Test.expect(false, [Math.PI].includes(0.01));
Test.expect(false, [0.01].includes(0));
Test.expect(false, [0].includes(0.01));
Test.expect(false, [0.01].includes(-0));
Test.expect(false, [-0].includes(0.01));
Test.expect(true, [0.0001].includes(0.0001));
Test.expect(false, [0.0001].includes(Math.PI));
Test.expect(false, [Math.PI].includes(0.0001));
Test.expect(false, [0.0001].includes(0));
Test.expect(false, [0].includes(0.0001));
Test.expect(false, [0.0001].includes(-0));
Test.expect(false, [-0].includes(0.0001));
Test.expect(true, [Math.PI].includes(Math.PI));
Test.expect(false, [Math.PI].includes(0));
Test.expect(false, [0].includes(Math.PI));
Test.expect(false, [Math.PI].includes(-0));
Test.expect(false, [-0].includes(Math.PI));
Test.expect(true, [0].includes(0));
Test.expect(true, [0].includes(-0));
Test.expect(true, [-0].includes(0));
Test.expect(true, [-0].includes(-0));