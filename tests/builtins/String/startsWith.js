expect(true, "foobar".startsWith("f"))
expect(true, "foobar".startsWith("fo"))
expect(true, "foobar".startsWith("foo"))
expect(true, "foobar".startsWith("foob"))
expect(true, "foobar".startsWith("fooba"))
expect(true, "foobar".startsWith("foobar"))
expect(false, "foobar".startsWith("foobar1"))
expect(true, "foobar".startsWith("f", 0))
expect(true, "foobar".startsWith("fo", 0))
expect(true, "foobar".startsWith("foo", 0))
expect(true, "foobar".startsWith("foob", 0))
expect(true, "foobar".startsWith("fooba", 0))
expect(true, "foobar".startsWith("foobar", 0))
expect(false, "foobar".startsWith("foobar1", 0))
expect(true, "foobar".startsWith("foo", []))
expect(true, "foobar".startsWith("foo", null))
expect(true, "foobar".startsWith("foo", undefined))
expect(true, "foobar".startsWith("foo", false))
expect(false, "foobar".startsWith("foo", true))
expect(true, "foobar".startsWith("foo", "foo"))
expect(true, "foobar".startsWith("foo", -1))
expect(false, "foobar".startsWith("foo", 42))
expect(true, "foobar".startsWith("bar", 3))
expect(true, "foobar".startsWith("bar", "3"))
expect(false, "foobar".startsWith("bar1", 3))
expect(false, "foobar".startsWith())
expect(true, "foobar".startsWith(""))
expect(true, "foobar".startsWith("", 0))
expect(true, "foobar".startsWith("", 1))
expect(true, "foobar".startsWith("", -1))
expect(true, "foobar".startsWith("", 42))
expect(true, "ðŸ˜€".startsWith("ðŸ˜€"))
expect(true, "ðŸ˜€".startsWith("\ud83d"))
expect(false, "ðŸ˜€".startsWith("\ude00"))
expect(false, "ðŸ˜€".startsWith("a"))