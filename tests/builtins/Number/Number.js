Test.expect(1, Number.length);
Test.expect("object", typeof Number.prototype);
Test.expect("number", typeof Number());
Test.expect(0, Number());
Test.expect(123, Number(123));
Test.expect(-123, Number(-123));
// TODO: Test.expect(123, Number(123n));
// TODO: Test.expect(-123, Number(-123n));
Test.expect(NaN, Number("1_23"));
Test.expect(123, Number("00123"));
Test.expect(NaN, Number("123n"));
Test.expect(42, Number("42"));
Test.expect(0, Number(null));
Test.expect(1, Number(true));
Test.expect(Infinity, Number("Infinity"));
Test.expect(Infinity, Number("+Infinity"));
Test.expect(-Infinity, Number("-Infinity"));
Test.expect(NaN, Number("infinity"));
Test.expect(NaN, Number("-infinity"));
Test.expect(NaN, Number("INFINITY"));
Test.expect(NaN, Number("-INFINITY"));
Test.expect(NaN, Number("inf"));
Test.expect(NaN, Number(undefined));
Test.expect(NaN, Number({}));
Test.expect(NaN, Number({ a: 1 }));
Test.expect(NaN, Number([1, 2, 3]));
Test.expect(NaN, Number("foo"));
Test.expect(Infinity, Number("10e10000"));
Test.expect(-Infinity, Number("-10e10000"));
Test.expect(1, Number("0b1"));
Test.expect(1, Number("0B1"));
Test.expect(1, Number("0b01"));
Test.expect(3, Number("0b11"));
Test.expect(NaN, Number("0b"));
Test.expect(NaN, Number("0B"));
Test.expect(NaN, Number("-0b1"));
Test.expect(NaN, Number("+0b1"));
Test.expect(NaN, Number("0b1.1"));
Test.expect(NaN, Number("0b1e10"));
Test.expect(NaN, Number("0b1e+10"));
Test.expect(NaN, Number("0b1e-10"));
Test.expect(NaN, Number("0b1_1"));
Test.expect(7, Number("0o7"));
Test.expect(7, Number("0O7"));
Test.expect(7, Number("0o07"));
Test.expect(63, Number("0o77"));
Test.expect(NaN, Number("0o"));
Test.expect(NaN, Number("0O"));
Test.expect(NaN, Number("-0o1"));
Test.expect(NaN, Number("+0o1"));
Test.expect(NaN, Number("0o1.1"));
Test.expect(NaN, Number("0o1e10"));
Test.expect(NaN, Number("0o1e+10"));
Test.expect(NaN, Number("0o1e-10"));
Test.expect(NaN, Number("0o1_1"));
Test.expect(1, Number("0x1"));
Test.expect(1, Number("0X1"));
Test.expect(1, Number("0x01"));
Test.expect(17, Number("0x11"));
Test.expect(NaN, Number("0x"));
Test.expect(NaN, Number("0X"));
Test.expect(NaN, Number("-0x1"));
Test.expect(NaN, Number("+0x1"));
Test.expect(NaN, Number("0x1.1"));
Test.expect(7696, Number("0x1e10"));
Test.expect(NaN, Number("0x1e+10"));
Test.expect(NaN, Number("0x1e-10"));
Test.expect(NaN, Number("0x1_1"));
Test.expect(Number(true), 1);
Test.expect(Number(false), 0);
Test.expect(Number(null), 0);
Test.expect(Number(undefined), NaN);
Test.expect(Number(0), 0);
Test.expect(Number("21"), 21);
Test.expect(Number("21.5"), 21.5);
Test.expect(Number("hello"), NaN);