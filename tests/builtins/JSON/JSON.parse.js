// basic functionality
Test.expect(2, JSON.parse.length);
Test.expect(5, JSON.parse("5"));
Test.expect(null, JSON.parse("null"));
Test.expect(true, JSON.parse("true"));
Test.expect(false, JSON.parse("false"));
Test.expect("test", JSON.parse('"test"'));
Test.expectEqual([1, 2, "foo"], JSON.parse('[1,2,"foo"]'));
Test.expectEqual({ foo: 1, bar: "baz" }, JSON.parse('{"foo":1,"bar":"baz"}'));

// negative zero
Test.expect(-0.0, JSON.parse("-0"));
Test.expect(-0.0, JSON.parse(" \n-0"));
Test.expect(-0.0, JSON.parse("-0  \t"));
Test.expect(-0.0, JSON.parse("\n\t -0\n   "));
Test.expect(-0.0, JSON.parse("-0.0"));
Test.expect(0, JSON.parse(-0));
Test.expect(1644452550.6489999294281, JSON.parse("1644452550.6489999294281"));
Test.expect(1234567890123, JSON.parse("1234567890123"));
Test.expect(4294967295, JSON.parse("4294967295"));
Test.expect(4294967296, JSON.parse("4294967296"));
Test.expect(4294967297, JSON.parse("4294967297"));
Test.expect(4294967298, JSON.parse("4294967298"));
Test.expect(2147483647, JSON.parse("2147483647"));
Test.expect(2147483648, JSON.parse("2147483648"));
Test.expect(2147483649, JSON.parse("2147483649"));
Test.expect(2147483650, JSON.parse("2147483650"));
Test.expect(9007199254740991, JSON.parse("9007199254740991"));
Test.expect(9007199254740992, JSON.parse("9007199254740992"));
Test.expect(9007199254740993, JSON.parse("9007199254740993"));
Test.expect(9007199254740994, JSON.parse("9007199254740994"));
Test.expect(9008199254740994, JSON.parse("9008199254740994"));
Test.expect(18446744073709551615, JSON.parse("18446744073709551615"));
Test.expect(18446744073709551616, JSON.parse("18446744073709551616"));
Test.expect(18446744073709551617, JSON.parse("18446744073709551617"));

const string = `{"var1":10,"var2":"hello","var3":{"nested":5}}`;

Test.expectEqual({ var1: 20, var2: "hello", var3: { nested: 10 } }, JSON.parse(string, (key, value) => {
	if (typeof value === "number") {
		return value * 2;
	} else {
		return value;
	}
}));

Test.expectEqual({ var2: "hello", var3: {} }, JSON.parse(string, (key, value) => {
	if (typeof value === "number") {
		return undefined;
	} else {
		return value;
	}
}));

Test.expectEqual(-0.1, JSON.parse("-0.1"));
Test.expectEqual(" ", JSON.parse("\" \""));
Test.expectEqual("", JSON.parse("\"\""));
Test.expectEqual("asd", JSON.parse("\"asd\""));
Test.expectEqual([-0], JSON.parse("[-0]"));
Test.expectEqual([-1], JSON.parse("[-1]"));
Test.expectEqual([-123], JSON.parse("[-123]"));
Test.expectEqual([-1e-78], JSON.parse("[-0.000000000000000000000000000000000000000000000000000000000000000000000000000001]\r\n"));
Test.expectEqual(["￾"], JSON.parse("[\"\\uFFFE\"]"));
Test.expectEqual([" "], JSON.parse("[\" \"]"));
Test.expectEqual([" "], JSON.parse("[\" \"]"));
Test.expectEqual([","], JSON.parse("[\"\\u002c\"]"));
Test.expectEqual([""], JSON.parse("[\"\"]"));
Test.expectEqual([""], JSON.parse("[\"\"]"));
Test.expectEqual(["ࠡ"], JSON.parse("[\"\\u0821\"]"));
Test.expectEqual(["​"], JSON.parse("[\"\\u200B\"]"));
Test.expectEqual(["⁤"], JSON.parse("[\"\\u2064\"]"));
Test.expectEqual(["\""], JSON.parse("[\"\\\"\"]"));
Test.expectEqual(["\""], JSON.parse("[\"\\u0022\"]"));
Test.expectEqual(["\"\\/\b\f\n\r\t"], JSON.parse("[\"\\\"\\\\\\/\\b\\f\\n\\r\\t\"]"));
Test.expectEqual(["\\"], JSON.parse("[\"\\u005C\"]"));
Test.expectEqual(["\\a"], JSON.parse("[\"\\\\a\"]"));
Test.expectEqual(["\\n"], JSON.parse("[\"\\\\n\"]"));
Test.expectEqual(["\\u0000"], JSON.parse("[\"\\\\u0000\"]"));
Test.expectEqual(["\u0000"], JSON.parse("[\"\\u0000\"]"));
Test.expectEqual(["\u0012"], JSON.parse("[\"\\u0012\"]"));
Test.expectEqual(["`Īካ"], JSON.parse("[\"\\u0060\\u012a\\u12AB\"]"));
Test.expectEqual(["⍂㈴⍂"], JSON.parse("[\"⍂㈴⍂\"]"));
Test.expectEqual(["𝄞"], JSON.parse("[\"\\uD834\\uDd1e\"]"));
Test.expectEqual(["😹💍"], JSON.parse("[\"\\ud83d\\ude39\\ud83d\\udc8d\"]"));
Test.expectEqual(["€𝄞"], JSON.parse("[\"€𝄞\"]"));
Test.expectEqual(["a"], JSON.parse("[\"a\"]"));
Test.expectEqual(["a"], JSON.parse("[\"a\"]\r\n"));
Test.expectEqual(["a/*b*/c/*d//e"], JSON.parse("[\"a/*b*/c/*d//e\"]"));
Test.expectEqual(["aa"], JSON.parse("[\"aa\"]"));
Test.expectEqual(["asd "], JSON.parse("[\"asd \"]"));
Test.expectEqual(["asd"], JSON.parse("[ \"asd\"]"));
Test.expectEqual(["asd"], JSON.parse("[\"asd\"]"));
Test.expectEqual(["aクリス"], JSON.parse("[\"\\u0061\\u30af\\u30EA\\u30b9\"]"));
Test.expectEqual(["ģ"], JSON.parse("[\"\\u0123\"]"));
Test.expectEqual(["new line"], JSON.parse("[\"new\\u00A0line\"]"));
Test.expectEqual(["new\nline"], JSON.parse("[\"new\\u000Aline\"]"));
Test.expectEqual(["π"], JSON.parse("[\"π\"]"));
Test.expectEqual(["ꙭ"], JSON.parse("[\"\\uA66D\"]"));
Test.expectEqual(["𐐷"], JSON.parse("[\"\\uD801\\udc37\"]"));
Test.expectEqual(["﷐"], JSON.parse("[\"\\uFDD0\"]"));
Test.expectEqual(["𛿿"], JSON.parse("[\"𛿿\"]"));
Test.expectEqual(["🿾"], JSON.parse("[\"\\uD83F\\uDFFE\"]"));
Test.expectEqual(["􏿾"], JSON.parse("[\"\\uDBFF\\uDFFE\"]"));
Test.expectEqual(["􏿿"], JSON.parse("[\"\\uDBFF\\uDFFF\"]"));
Test.expectEqual(["􏿿"], JSON.parse("[\"􏿿\"]"));
Test.expectEqual(["￿"], JSON.parse("[\"\\uFFFF\"]"));
Test.expectEqual(["￿"], JSON.parse("[\"￿\"]"));
Test.expectEqual([[]], JSON.parse("[[]   ]"));
Test.expectEqual([], JSON.parse(" [] "));
Test.expectEqual([], JSON.parse("[]"));
Test.expectEqual([0.01], JSON.parse("[1E-2]"));
Test.expectEqual([0.01], JSON.parse("[1e-2]"));
Test.expectEqual([0], JSON.parse("[0e+1]"));
Test.expectEqual([0], JSON.parse("[0e1]"));
Test.expectEqual([1,null,null,null,2], JSON.parse("[1,null,null,null,2]"));
Test.expectEqual([1.23456e+80], JSON.parse("[123.456e78]"));
Test.expectEqual([1.23e+47], JSON.parse("[123e45]"));
Test.expectEqual([1.23e+67], JSON.parse("[123e65]"));
Test.expectEqual([1], JSON.parse(" [1]"));
Test.expectEqual([1], JSON.parse("[1\r\n]"));
Test.expectEqual([100], JSON.parse("[1E+2]"));
Test.expectEqual([100], JSON.parse("[1e+2]"));
Test.expectEqual([123.456789], JSON.parse("[123.456789]"));
Test.expectEqual([123], JSON.parse("[123]"));
Test.expectEqual([1e+22], JSON.parse("[1E22]"));
Test.expectEqual([2], JSON.parse("[2] "));
Test.expectEqual([200], JSON.parse("[20e1]"));
Test.expectEqual([4], JSON.parse("[ 4]"));
Test.expectEqual([false], JSON.parse("[false]"));
Test.expectEqual([null,1,"1",{}], JSON.parse("[null, 1, \"1\", {}]"));
Test.expectEqual([null], JSON.parse("[null]"));
Test.expectEqual([true], JSON.parse("[true]"));
Test.expectEqual({"":0}, JSON.parse("{\"\":0}"));
Test.expectEqual({"a":"b"}, JSON.parse("{\"a\":\"b\",\"a\":\"b\"}"));
Test.expectEqual({"a":"b"}, JSON.parse("{\r\n\"a\": \"b\"\r\n}"));
Test.expectEqual({"a":"c"}, JSON.parse("{\"a\":\"b\",\"a\":\"c\"}"));
Test.expectEqual({"a":[]}, JSON.parse("{\"a\":[]}"));
Test.expectEqual({"asd":"sdf","dfg":"fgh"}, JSON.parse("{\"asd\":\"sdf\", \"dfg\":\"fgh\"}"));
Test.expectEqual({"asd":"sdf"}, JSON.parse("{\"asd\":\"sdf\"}"));
Test.expectEqual({"foo\u0000bar":42}, JSON.parse("{\"foo\\u0000bar\": 42}"));
Test.expectEqual({"min":-1e+28,"max":1e+28}, JSON.parse("{ \"min\": -1.0e+28, \"max\": 1.0e+28 }"));
Test.expectEqual({"title":"Полтора Землекопа"}, JSON.parse("{\"title\":\"\\u041f\\u043e\\u043b\\u0442\\u043e\\u0440\\u0430 \\u0417\\u0435\\u043c\\u043b\\u0435\\u043a\\u043e\\u043f\\u0430\" }"));
Test.expectEqual({"x":[{"id":"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"}],"id":"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"}, JSON.parse("{\"x\":[{\"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}], \"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}"));
Test.expectEqual({}, JSON.parse("{}"));
Test.expectEqual(42, JSON.parse("42"));
Test.expectEqual(false, JSON.parse("false"));
Test.expectEqual(null, JSON.parse("null"));
Test.expectEqual(true, JSON.parse("true"));
Test.expectError("SyntaxError", "Bad control character '\\r' in string literal in JSON", () => JSON.parse("[\"new\r\nline\"]"));
Test.expectError("SyntaxError", "Bad control character '\\t' in string literal in JSON", () => JSON.parse("[\"\t\"]"));
Test.expectError("SyntaxError", "Bad control character '\\v' in string literal in JSON", () => JSON.parse("[\"\u000ba\"\\f]"));
Test.expectError("SyntaxError", "Bad control character '\\x00' in string literal in JSON", () => JSON.parse("[\"a\u0000a\"]"));

Test.expectError("SyntaxError", "Bad escaped character in JSON", () => JSON.parse("[\"\\{[\"\\{[\"\\{[\"\\{"));
Test.expectError("SyntaxError", "Bad escaped character in JSON", () => JSON.parse("[\"\\\t\"]"));
Test.expectError("SyntaxError", "Bad escaped character in JSON", () => JSON.parse("[\"\\\u0000\"]"));
Test.expectError("SyntaxError", "Bad escaped character in JSON", () => JSON.parse("[\"\\🌀\"]"));
Test.expectError("SyntaxError", "Bad escaped character in JSON", () => JSON.parse("[\"\\a\"]"));
Test.expectError("SyntaxError", "Bad escaped character in JSON", () => JSON.parse("[\"\\uD800\\uD800\\x\"]"));
Test.expectError("SyntaxError", "Bad escaped character in JSON", () => JSON.parse("[\"\\x00\"]"));
Test.expectError("SyntaxError", "Bad escaped character in JSON", () => JSON.parse("[\"\\�\"]"));
Test.expectError("SyntaxError", "Bad escaped character in JSON", () => JSON.parse("\"\\UA66D\""));

Test.expectError("SyntaxError", "Bad Unicode escape in JSON", () => JSON.parse("[\"\\u00A\"]"));
Test.expectError("SyntaxError", "Bad Unicode escape in JSON", () => JSON.parse("[\"\\uD800\\u\"]"));
Test.expectError("SyntaxError", "Bad Unicode escape in JSON", () => JSON.parse("[\"\\uD800\\u1\"]"));
Test.expectError("SyntaxError", "Bad Unicode escape in JSON", () => JSON.parse("[\"\\uD800\\u1x\"]"));
Test.expectError("SyntaxError", "Bad Unicode escape in JSON", () => JSON.parse("[\"\\uD834\\uDd\"]"));
Test.expectError("SyntaxError", "Bad Unicode escape in JSON", () => JSON.parse("[\"\\uqqqq\"]"));
Test.expectError("SyntaxError", "Bad Unicode escape in JSON", () => JSON.parse("[\"\\u�\"]"));

Test.expectError("SyntaxError", "Exponent part is missing a number in JSON", () => JSON.parse("[0.3e]"));
Test.expectError("SyntaxError", "Exponent part is missing a number in JSON", () => JSON.parse("[0.3e+]"));
Test.expectError("SyntaxError", "Exponent part is missing a number in JSON", () => JSON.parse("[0E]"));
Test.expectError("SyntaxError", "Exponent part is missing a number in JSON", () => JSON.parse("[0e]"));
Test.expectError("SyntaxError", "Exponent part is missing a number in JSON", () => JSON.parse("[0e+-1]"));
Test.expectError("SyntaxError", "Exponent part is missing a number in JSON", () => JSON.parse("[0E+]"));
Test.expectError("SyntaxError", "Exponent part is missing a number in JSON", () => JSON.parse("[0e+]"));
Test.expectError("SyntaxError", "Exponent part is missing a number in JSON", () => JSON.parse("[1.0e-]"));
Test.expectError("SyntaxError", "Exponent part is missing a number in JSON", () => JSON.parse("[1.0e]"));
Test.expectError("SyntaxError", "Exponent part is missing a number in JSON", () => JSON.parse("[1.0e+]"));
Test.expectError("SyntaxError", "Exponent part is missing a number in JSON", () => JSON.parse("[1ea]"));
Test.expectError("SyntaxError", "Exponent part is missing a number in JSON", () => JSON.parse("[1eE2]"));
Test.expectError("SyntaxError", "Exponent part is missing a number in JSON", () => JSON.parse("[1e�]"));

Test.expectError("SyntaxError", "No number after minus sign in JSON", () => JSON.parse("[- 1]"));
Test.expectError("SyntaxError", "No number after minus sign in JSON", () => JSON.parse("[-.123]"));
Test.expectError("SyntaxError", "No number after minus sign in JSON", () => JSON.parse("[-]"));
Test.expectError("SyntaxError", "No number after minus sign in JSON", () => JSON.parse("[-foo]"));
Test.expectError("SyntaxError", "No number after minus sign in JSON", () => JSON.parse("[-Infinity]"));
Test.expectError("SyntaxError", "No number after minus sign in JSON", () => JSON.parse("[-NaN]"));

Test.expectError("SyntaxError", "Unterminated fractional number in JSON", () => JSON.parse("[-2.]"));
Test.expectError("SyntaxError", "Unterminated fractional number in JSON", () => JSON.parse("[0.e1]"));
Test.expectError("SyntaxError", "Unterminated fractional number in JSON", () => JSON.parse("[1.]"));
Test.expectError("SyntaxError", "Unterminated fractional number in JSON", () => JSON.parse("[2.e-3]"));
Test.expectError("SyntaxError", "Unterminated fractional number in JSON", () => JSON.parse("[2.e+3]"));
Test.expectError("SyntaxError", "Unterminated fractional number in JSON", () => JSON.parse("[2.e3]"));
Test.expectError("SyntaxError", "Unterminated fractional number in JSON", () => JSON.parse("[9.e+]"));

Test.expectError("SyntaxError", "Unterminated string in JSON", () => JSON.parse("[\"\\\"]"));
Test.expectError("SyntaxError", "Unterminated string in JSON", () => JSON.parse("[\"\\\\\\\"]"));
Test.expectError("SyntaxError", "Unterminated string in JSON", () => JSON.parse("[\"\\uD800\\\"]"));
Test.expectError("SyntaxError", "Unterminated string in JSON", () => JSON.parse("[\"a"));
Test.expectError("SyntaxError", "Unterminated string in JSON", () => JSON.parse("[\"asd]"));
Test.expectError("SyntaxError", "Unterminated string in JSON", () => JSON.parse("{\"a"));
Test.expectError("SyntaxError", "Unterminated string in JSON", () => JSON.parse("{\"a\":\"a"));
Test.expectError("SyntaxError", "Unterminated string in JSON", () => JSON.parse("\""));

Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse(" "));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse(""));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("[ false, nul"));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("[ false, tru"));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("[ true, fals"));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("["));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("[{"));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("[{}"));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("[\"\""));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("[\"\\"));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("[\"a\",\r\n4\r\n,1,"));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("[\"a\""));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("[\"x\""));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("[1,"));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("[1,\r\n1\r\n,1"));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("[1"));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("{"));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("{\"\":"));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("{\"a\":"));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("{\"a\""));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("{\"asd\":\"asd\""));
Test.expectError("SyntaxError", "Unexpected end of JSON input", () => JSON.parse("{\"x\": true,"));

Test.expectError("SyntaxError", "Unexpected non-whitespace character ',' after JSON", () => JSON.parse("[\"\"],"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character '[' after JSON", () => JSON.parse("[][]"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character ']' after JSON", () => JSON.parse("[\"x\"]]"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character ']' after JSON", () => JSON.parse("[1]]"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character ']' after JSON", () => JSON.parse("1]"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character '}' after JSON", () => JSON.parse("{}}"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character '@' after JSON", () => JSON.parse("2@"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character '/' after JSON", () => JSON.parse("{\"a\":\"b\"}/"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character '/' after JSON", () => JSON.parse("{\"a\":\"b\"}/**/"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character '/' after JSON", () => JSON.parse("{\"a\":\"b\"}/**//"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character '/' after JSON", () => JSON.parse("{\"a\":\"b\"}//"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character '\\x00' after JSON", () => JSON.parse("123\u0000"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character '#' after JSON", () => JSON.parse("{\"a\":\"b\"}#"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character '#' after JSON", () => JSON.parse("{\"a\":\"b\"}#{}"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character 'x' after JSON", () => JSON.parse("[1]x"));
Test.expectError("SyntaxError", "Unexpected non-whitespace character 'x' after JSON", () => JSON.parse("\"\"x"));
Test.expectError("SyntaxError", `Unexpected non-whitespace character '"' after JSON`, () => JSON.parse("{\"a\": true} \"x\""));

Test.expectError("SyntaxError", "Unexpected token ',' in JSON", () => JSON.parse("[   , \"\"]"));
Test.expectError("SyntaxError", "Unexpected token ',' in JSON", () => JSON.parse("[,]"));
Test.expectError("SyntaxError", "Unexpected token ',' in JSON", () => JSON.parse("[,1]"));
Test.expectError("SyntaxError", "Unexpected token ',' in JSON", () => JSON.parse("[\"x\",,]"));
Test.expectError("SyntaxError", "Unexpected token ',' in JSON", () => JSON.parse("[1,,]"));
Test.expectError("SyntaxError", "Unexpected token ',' in JSON", () => JSON.parse("[1,,2]"));
Test.expectError("SyntaxError", "Unexpected token ',' in JSON", () => JSON.parse("{,"));
Test.expectError("SyntaxError", "Unexpected token ',' in JSON", () => JSON.parse("{\"a\":\"b\",,\"c\":\"d\"}"));
Test.expectError("SyntaxError", "Unexpected token ',' in JSON", () => JSON.parse("{\"id\":0,,,,,}"));
Test.expectError("SyntaxError", "Unexpected token ',' in JSON", () => JSON.parse("{\"x\", null}"));
Test.expectError("SyntaxError", "Unexpected token ','", () => JSON.parse("[,"));
Test.expectError("SyntaxError", "Unexpected token ':' in JSON", () => JSON.parse("[\"\": 1]"));
Test.expectError("SyntaxError", "Unexpected token ':' in JSON", () => JSON.parse("[1:2]"));
Test.expectError("SyntaxError", "Unexpected token ':' in JSON", () => JSON.parse("{:\"b\"}"));
Test.expectError("SyntaxError", "Unexpected token ':'", () => JSON.parse("{\"x\"::\"b\"}"));
Test.expectError("SyntaxError", "Unexpected token '.' in JSON", () => JSON.parse("[-1.0.]"));
Test.expectError("SyntaxError", "Unexpected token '.' in JSON", () => JSON.parse("[.-1]"));
Test.expectError("SyntaxError", "Unexpected token '.' in JSON", () => JSON.parse("[.2e-3]"));
Test.expectError("SyntaxError", "Unexpected token '.' in JSON", () => JSON.parse("[0.1.2]"));
Test.expectError("SyntaxError", "Unexpected token '.'", () => JSON.parse("[.123]"));
Test.expectError("SyntaxError", "Unexpected token '[' in JSON", () => JSON.parse("[3[4]]"));
Test.expectError("SyntaxError", "Unexpected token '[' in JSON", () => JSON.parse("{[: \"x\"}\r\n"));
Test.expectError("SyntaxError", "Unexpected token '[' in JSON", () => JSON.parse("{["));
Test.expectError("SyntaxError", "Unexpected token ']' in JSON", () => JSON.parse("[\"\",]"));
Test.expectError("SyntaxError", "Unexpected token ']' in JSON", () => JSON.parse("[1,]"));
Test.expectError("SyntaxError", "Unexpected token ']' in JSON", () => JSON.parse("[fals]"));
Test.expectError("SyntaxError", "Unexpected token ']' in JSON", () => JSON.parse("[nul]"));
Test.expectError("SyntaxError", "Unexpected token ']' in JSON", () => JSON.parse("[tru]"));
Test.expectError("SyntaxError", "Unexpected token ']' in JSON", () => JSON.parse("{]"));
Test.expectError("SyntaxError", "Unexpected token ']'", () => JSON.parse("]"));
Test.expectError("SyntaxError", "Unexpected token '}' in JSON", () => JSON.parse("{\"id\":0,}"));
Test.expectError("SyntaxError", "Unexpected token '}' in JSON", () => JSON.parse("{\"�\":\"0\",}"));
Test.expectError("SyntaxError", "Unexpected token '}'", () => JSON.parse("{ \"foo\" : \"bar\", \"a\" }"));
Test.expectError("SyntaxError", "Unexpected token '*' in JSON", () => JSON.parse("[*]"));
Test.expectError("SyntaxError", "Unexpected token '*'", () => JSON.parse("*"));
Test.expectError("SyntaxError", "Unexpected token '/'", () => JSON.parse("{\"a\":/*comment*/\"b\"}"));
Test.expectError("SyntaxError", "Unexpected token '\\'", () => JSON.parse("[\\n]"));
Test.expectError("SyntaxError", "Unexpected token '\\'", () => JSON.parse("[\\u000A\"\"]"));
Test.expectError("SyntaxError", "Unexpected token '\\'", () => JSON.parse("[\\u0020\"asd\"]"));
Test.expectError("SyntaxError", "Unexpected token '\\f'", () => JSON.parse("[\f]"));
Test.expectError("SyntaxError", "Unexpected token '\\u00E5' in JSON", () => JSON.parse("å"));
Test.expectError("SyntaxError", "Unexpected token '\\u00E9'", () => JSON.parse("[é]"));
Test.expectError("SyntaxError", "Unexpected token '\\u2060' in JSON", () => JSON.parse("[⁠]"));
Test.expectError("SyntaxError", "Unexpected token '\\uD83C\\uDDE8' in JSON", () => JSON.parse("{🇨🇭}"));
Test.expectError("SyntaxError", "Unexpected token '\\uFEFF' in JSON", () => JSON.parse("﻿"));
Test.expectError("SyntaxError", "Unexpected token '\\uFF11'", () => JSON.parse("[１]"));
Test.expectError("SyntaxError", "Unexpected token '\\uFFFD' in JSON", () => JSON.parse("[0�]\r\n"));
Test.expectError("SyntaxError", "Unexpected token '\\uFFFD' in JSON", () => JSON.parse("[123�]"));
Test.expectError("SyntaxError", "Unexpected token '\\uFFFD' in JSON", () => JSON.parse("[1e1�]"));
Test.expectError("SyntaxError", "Unexpected token '\\uFFFD' in JSON", () => JSON.parse("[�]"));
Test.expectError("SyntaxError", "Unexpected token '\\uFFFD'", () => JSON.parse("�"));
Test.expectError("SyntaxError", "Unexpected token '\\uFFFD'", () => JSON.parse("�{}"));
Test.expectError("SyntaxError", "Unexpected token '\\x00'", () => JSON.parse("[\u0000]"));
Test.expectError("SyntaxError", "Unexpected token '+' in JSON", () => JSON.parse("[++1234]"));
Test.expectError("SyntaxError", "Unexpected token '+' in JSON", () => JSON.parse("[+1]"));
Test.expectError("SyntaxError", "Unexpected token '+' in JSON", () => JSON.parse("[+Inf]"));
Test.expectError("SyntaxError", "Unexpected token '+' in JSON", () => JSON.parse("[1+2]"));
Test.expectError("SyntaxError", "Unexpected token '<'", () => JSON.parse("[<null>]"));
Test.expectError("SyntaxError", "Unexpected token '<'", () => JSON.parse("<.>"));
Test.expectError("SyntaxError", "Unexpected token '0' in JSON", () => JSON.parse("[1 000.0]"));
Test.expectError("SyntaxError", "Unexpected token '1' in JSON", () => JSON.parse("[-01]"));
Test.expectError("SyntaxError", "Unexpected token '1' in JSON", () => JSON.parse("[-012]"));
Test.expectError("SyntaxError", "Unexpected token '1' in JSON", () => JSON.parse("[012]"));
Test.expectError("SyntaxError", "Unexpected token '1' in JSON", () => JSON.parse("{\"a\":\"a\" 123}"));
Test.expectError("SyntaxError", "Unexpected token '1' in JSON", () => JSON.parse("{1:1}"));
Test.expectError("SyntaxError", "Unexpected token '9' in JSON", () => JSON.parse("{9999E9999:1}"));
Test.expectError("SyntaxError", "Unexpected token 'a' in JSON", () => JSON.parse("[1.2a-3]"));
Test.expectError("SyntaxError", "Unexpected token 'a' in JSON", () => JSON.parse("[a�]"));
Test.expectError("SyntaxError", "Unexpected token 'a' in JSON", () => JSON.parse("{a: \"b\"}"));
Test.expectError("SyntaxError", "Unexpected token 'a' in JSON", () => JSON.parse("abc"));
Test.expectError("SyntaxError", "Unexpected token 'a'", () => JSON.parse("aå"));
Test.expectError("SyntaxError", "Unexpected token 'b' in JSON", () => JSON.parse("{\"a\" b}"));
Test.expectError("SyntaxError", "Unexpected token 'f' in JSON", () => JSON.parse("[-123.123foo]"));
Test.expectError("SyntaxError", "Unexpected token 'H' in JSON", () => JSON.parse("[1.8011670033376514H-308]"));
Test.expectError("SyntaxError", "Unexpected token 'I' in JSON", () => JSON.parse("[Inf]"));
Test.expectError("SyntaxError", "Unexpected token 'I' in JSON", () => JSON.parse("[Infinity]"));
Test.expectError("SyntaxError", "Unexpected token 'k' in JSON", () => JSON.parse("{key: 'value'}"));
Test.expectError("SyntaxError", "Unexpected token 'N' in JSON", () => JSON.parse("[NaN]"));
Test.expectError("SyntaxError", "Unexpected token 'n' in JSON", () => JSON.parse("{null:null,null:null}"));
Test.expectError("SyntaxError", "Unexpected token 't' in JSON", () => JSON.parse("[1 true]"));
Test.expectError("SyntaxError", "Unexpected token 't'", () => JSON.parse("[\"x\", truth]"));
Test.expectError("SyntaxError", "Unexpected token 'T'", () => JSON.parse("[True]"));
Test.expectError("SyntaxError", "Unexpected token 'x' in JSON", () => JSON.parse("[-1x]"));
Test.expectError("SyntaxError", "Unexpected token 'x' in JSON", () => JSON.parse("[0x1]"));
Test.expectError("SyntaxError", "Unexpected token 'x' in JSON", () => JSON.parse("[0x42]"));
Test.expectError("SyntaxError", "Unexpected token 'x' in JSON", () => JSON.parse("[x"));
Test.expectError("SyntaxError", `Unexpected token '"' in JSON`, () => JSON.parse("{\"a\" \"b\"}"));
Test.expectError("SyntaxError", `Unexpected token "'" in JSON`, () => JSON.parse("['single quote']"));
Test.expectError("SyntaxError", `Unexpected token "'" in JSON`, () => JSON.parse("{'a':0}"));
Test.expectError("SyntaxError", `Unexpected token "'" in JSON`, () => JSON.parse("{'a'"));
Test.expectError("SyntaxError", `Unexpected token "'"`, () => JSON.parse("['"));

Test.expectError("SyntaxError", "Unexpected token 'u' in JSON", () => JSON.parse(undefined));
Test.expectError("SyntaxError", "Unexpected token 'N' in JSON", () => JSON.parse(NaN));
Test.expectError("SyntaxError", "Unexpected token 'N' in JSON", () => JSON.parse(-NaN));
Test.expectError("SyntaxError", "Unexpected token 'I' in JSON", () => JSON.parse(Infinity));
Test.expectError("SyntaxError", 'No number after minus sign in JSON', () => JSON.parse(-Infinity));
Test.expectError("SyntaxError", "Unexpected token '}' in JSON", () => JSON.parse('{ "foo" }'));
Test.expectError("SyntaxError", "Unexpected token 'f' in JSON", () => JSON.parse('{ foo: "bar" }'));
Test.expectError("SyntaxError", "Unexpected token ']' in JSON", () => JSON.parse("[1,2,3,]"));
Test.expectError("SyntaxError", "Unexpected token ']' in JSON", () => JSON.parse("[1,2,3, ]"));
Test.expectError("SyntaxError", "Unexpected token '}' in JSON", () => JSON.parse('{ "foo": "bar",}'));
Test.expectError("SyntaxError", "Unexpected token '}' in JSON", () => JSON.parse('{ "foo": "bar", }'));
Test.expectError("SyntaxError", 'Unexpected end of JSON input', () => JSON.parse(""));